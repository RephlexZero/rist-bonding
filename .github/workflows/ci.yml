name: RIST Bonding Plugin CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily performance tests
    - cron: '0 6 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build Plugin
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-bad1.0-dev \
          libglib2.0-dev \
          pkg-config \
          gstreamer1.0-tools \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly
    
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Check code formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Build release
      run: cargo build --release --verbose
    
    - name: Test plugin registration
      run: |
        export GST_PLUGIN_PATH="$(pwd)/target/release"
        gst-inspect-1.0 ristsmart
        gst-inspect-1.0 ristdispatcher
        gst-inspect-1.0 dynbitrate
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gstreamer-plugin
        path: |
          target/release/libgstristsmart.so
          target/release/libgstristsmart.d
        retention-days: 7

  network-simulation-test:
    name: Network Simulation Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: gstreamer-plugin
        path: target/release/
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-bad1.0-dev \
          libglib2.0-dev \
          pkg-config \
          gstreamer1.0-tools \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly \
          gstreamer1.0-libav \
          iproute2 \
          iperf3 \
          tcpdump \
          netcat-openbsd \
          jq \
          python3 \
          python3-pip \
          python3-matplotlib \
          python3-numpy \
          docker.io \
          docker-compose
    
    - name: Setup Docker
      run: |
        sudo systemctl start docker
        sudo usermod -aG docker $USER
        # Use newgrp to activate group membership for current session
        newgrp docker
    
    - name: Build test infrastructure
      run: |
        chmod +x scripts/build-test-env.sh
        scripts/build-test-env.sh
    
    - name: Run basic functionality tests
      run: |
        chmod +x scripts/test-basic.sh
        scripts/test-basic.sh
    
    - name: Run network simulation tests
      run: |
        chmod +x scripts/test-network-sim.sh
        scripts/test-network-sim.sh
    
    - name: Run stress tests
      run: |
        chmod +x scripts/test-stress.sh
        scripts/test-stress.sh
    
    - name: Generate performance report
      run: |
        chmod +x scripts/generate-report.sh
        scripts/generate-report.sh
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results/
          reports/
        retention-days: 30
    
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-report
        path: |
          reports/performance-report.html
          reports/performance-report.json
          reports/*.png
        retention-days: 90

  docker-integration-test:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: gstreamer-plugin
        path: target/release/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build test images
      run: |
        docker build -t rist-test-sender -f docker/Dockerfile.sender .
        docker build -t rist-test-receiver -f docker/Dockerfile.receiver .
        docker build -t rist-network-sim -f docker/Dockerfile.network-sim .
    
    - name: Run multi-link bonding test
      run: |
        chmod +x scripts/test-docker-integration.sh
        scripts/test-docker-integration.sh
    
    - name: Collect container logs
      if: always()
      run: |
        mkdir -p test-results/logs
        docker logs rist-sender > test-results/logs/sender.log 2>&1 || true
        docker logs rist-receiver > test-results/logs/receiver.log 2>&1 || true
        for i in {1..4}; do
          docker logs rist-network-$i > test-results/logs/network-$i.log 2>&1 || true
        done
    
    - name: Upload container logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-logs
        path: test-results/logs/
        retention-days: 7